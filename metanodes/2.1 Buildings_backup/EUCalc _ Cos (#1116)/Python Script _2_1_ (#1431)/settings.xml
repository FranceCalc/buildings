<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010trigrams = {'agriculture':'agr',%%00010%%00009%%00009%%00009'buildings':'bld',%%00010%%00009%%00009%%00009'climate':'clm',%%00010%%00009%%00009%%00009'ccus':'ccu',%%00010%%00009%%00009%%00009'electricity_supply':'elc',%%00010%%00009%%00009%%00009'employment':'emp',%%00010%%00009%%00009%%00009'industry':'ind',%%00010%%00009%%00009%%00009'lifestyles':'lfs',%%00010%%00009%%00009%%00009'materials':'mat',%%00010%%00009%%00009%%00009'social impacts':'sip',%%00010%%00009%%00009%%00009'transboundary':'trb',%%00010%%00009%%00009%%00009'transport':'tra',%%00010%%00009%%00009%%00009'technology':'tec',%%00010%%00009%%00009%%00009'minerals':'min',%%00010%%00009%%00009%%00009'water': 'wat',%%00010%%00009%%00009%%00009'air_pollution': 'air'%%00010}%%00010mod_tri = trigrams.get(flow_variables['module'])%%00010%%00010%%00010# Pandas generates a warning when we set data on a copy of a dataframe. The objective is to%%00010# warn the user who would want to modify the original dataframe through the copy.%%00010# Since this is not a typical practice, we disable the warning, which speeds up the function.%%00010pd.options.mode.chained_assignment = None%%00010%%00010baseyear=int(flow_variables['baseyear'])%%00010pli_column = 'ots_tec_price-indices_pli[%]'%%00010activity_filter_pattern = flow_variables['activity_filter_pattern']%%00010%%00010# Rename and split dataframes%%00010df_activity = input_table_1.copy()%%00010df_unit_costs = input_table_2[input_table_2['sector']==mod_tri]%%00010df_price_indices = input_table_2.loc[input_table_2['sector'].isna(), ['Country', pli_column]]%%00010%%00010#TODO: SORT DF?%%00010%%00010df_unit_costs['evolution_method'] = df_unit_costs['evolution_method'].astype('int64')%%00010# Adds the b factor and baseyear costs%%00010if flow_variables['cost_type'] == 'CAPEX':%%00010    df_unit_costs.rename(columns={'capex_b_factor':'b_factor', 'capex_d_factor':'d_factor', 'capex_baseyear':'unit_cost_baseyear'}, inplace=True)%%00010elif flow_variables['cost_type'] == 'OPEX':%%00010    df_unit_costs.rename(columns={'opex_b_factor': 'b_factor', 'opex_d_factor':'d_factor', 'opex_baseyear': 'unit_cost_baseyear'}, inplace=True)%%00010%%00010# Define index for faster lookups%%00010df_activity['Years'] = df_activity['Years'].astype('int64')%%00010df_activity.set_index(['Years', 'Country'], inplace=True)%%00010%%00010# Extract technology code from activity%%00010df_activity.columns = df_activity.columns.str.extract(activity_filter_pattern, expand=False)%%00010df_activity = df_activity.loc[:,df_activity.columns.notna()]%%00010%%00010# Transform activity into long format%%00010df_activity_full = df_activity.stack().to_frame('activity')%%00010df_activity_full.index.set_names('technology_code', level=-1, inplace=True)%%00010df_activity_full.index.set_names('Country', level=-2, inplace=True)%%00010df_activity_full.reset_index(inplace=True)%%00010%%00010# Sums all countries as cost calculations happen at European level%%00010df_activity = df_activity.groupby(by='Years').sum()%%00010%%00010## Learning rate methodology%%00010## -------------------------%%00010%%00010# Identify columns to apply a learning rate method%%00010df_unit_costs_LR = df_unit_costs.loc[(df_unit_costs['evolution_method'] == 2) | (df_unit_costs['evolution_method'] == 3), :]%%00010%%00010# Identify columns that have to be accumulated over time and replace metric with cumulative sum%%00010columns_to_accumulate = list(set(df_unit_costs.loc[df_unit_costs['evolution_method'] == 2, 'technology_code'].tolist()).intersection(df_activity.columns))%%00010df_activity[columns_to_accumulate] = df_activity.loc[:, columns_to_accumulate].cumsum()%%00010%%00010# Changes to long format%%00010df_activity_LR = df_activity.stack().to_frame('activity')%%00010df_activity_LR.index.set_names('technology_code', level=-1, inplace=True)%%00010%%00010# Merge unit costs and activity%%00010#df_activity_LR=df_activity_LR.reset_index().merge(df_unit_costs_LR.reset_index(), on='technology_code', how='inner', suffixes=['','_y'])%%00010df_activity_LR=df_activity_LR.reset_index().merge(df_unit_costs_LR, on='technology_code', how='inner', suffixes=['','_y'])%%00010%%00010# Calculate 'learning' = activity^b%%00010df_activity_LR['learning'] = df_activity_LR['activity'] ** df_activity_LR['b_factor']%%00010%%00010# Calculate factor 'a' in Cost=a*activity^b for baseyear%%00010df_factors = df_activity_LR.loc[df_activity_LR['activity'] != 0,:].groupby(by='technology_code').first().reset_index()%%00010df_factors['a_factor']=df_factors['unit_cost_baseyear'] / df_factors['learning']%%00010%%00010# Adds 'a' factor to activity dataframe and calculate Cost=a*activity^b for all years%%00010df_activity_LR = df_activity_LR.loc[df_activity_LR['Years'] &gt;= baseyear, :]%%00010df_activity_LR = df_activity_LR.merge(df_factors[['a_factor', 'technology_code']], on=['technology_code'], how='left')%%00010df_activity_LR.loc[:, 'unit_cost'] = df_activity_LR.loc[:, 'learning'] * df_activity_LR.loc[:, 'a_factor']%%00010%%00010## Linear evolution methodology%%00010## ----------------------------%%00010%%00010df_unit_costs_linear = df_unit_costs.loc[df_unit_costs['evolution_method'] == 1, :]%%00010df_activity_linear = df_activity.loc[df_activity.index.get_level_values('Years') &gt;= baseyear, :].stack().to_frame('activity')%%00010df_activity_linear.index.set_names('technology_code', level=-1, inplace=True)%%00010df_activity_linear=df_activity_linear.reset_index().merge(df_unit_costs_linear[['d_factor', 'unit_cost_baseyear', 'technology_code']], on='technology_code', how='inner')%%00010df_activity_linear.loc[:, 'unit_cost']=df_activity_linear['d_factor'] * (df_activity_linear['Years'] - baseyear) + df_activity_linear['unit_cost_baseyear']%%00010%%00010## Assemble unit costs from both methodologies and calculate total costs%%00010## ---------------------------------------------------------------------%%00010%%00010# Combine unit costs for both methods%%00010output_table = pd.concat([df_activity_linear[['unit_cost','technology_code', 'Years']],%%00010                          df_activity_LR[['unit_cost','technology_code', 'Years']]])%%00010%%00010# Merge with full activity table%%00010output_table = pd.merge(df_activity_full, output_table, on=['Years', 'technology_code'])%%00010%%00010# Merge with price level index and calculate total cost%%00010output_table = pd.merge(df_price_indices, output_table, on='Country')%%00010output_table.loc[:, 'cost'] = output_table.loc[:, 'unit_cost'] * output_table.loc[:, 'activity'] * output_table[pli_column] / 100 /1e6%%00010%%00010# For columns where activity is zero, resulting cost must be zero (otherwise LR methodology could give NaNs)%%00010output_table.loc[output_table['activity'] == 0 , 'cost'] = 0%%00010output_table.drop([pli_column, 'activity'], axis='columns', inplace=True)%%00010%%00010# Rename technology codes%%00010if flow_variables['cost_type'] == 'CAPEX':%%00010    prefix = 'capex'%%00010else:%%00010    prefix = 'opex'%%00010%%00010# Prepare dataframe to be sent to Knime%%00010output_table['Years'] = output_table['Years'].astype('str')%%00010if flow_variables['include_unit_costs']==1:%%00010%%00009output_table = output_table.set_index(['Years','Country','technology_code'])[['cost', 'unit_cost']].unstack('technology_code')%%00010%%00009output_table.columns = [mod_tri + '_' + prefix + '_' + c[1] + '[MEUR]' if c[0]=='cost' else mod_tri + '_unit-' + prefix + '_' + c[1] + '[EUR/unit]' for c in output_table.columns]%%00010else:%%00010%%00009output_table = output_table.set_index(['Years','Country','technology_code'])[['cost']].unstack('technology_code')%%00010%%00009output_table.columns = [mod_tri + '_' + prefix + '_' + c[1] + '[MEUR]' for c in output_table.columns]%%00010%%00010output_table.reset_index(inplace=True)%%00010%%00010%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="PYTHON3"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Cost calculation"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1008"/>
<entry key="y-coordinate" type="xint" value="679"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script2in1out.Python2Script2In1OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2â‡’1)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.2.v201904170931"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.2.v201904170931"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2â‡’1)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
